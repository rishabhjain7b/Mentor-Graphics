module Decode( clock, reset, enable_decode, dout, E_Control, npc_in, Mem_Control, W_Control, IR, npc_out);

input clock, reset, enable_decode;
input [15:0] instr_dout;
input [15:0] npc_in;
input [2:0]psr;
output [1:0] W_Control;
output Mem_Control;
output [5:0] E_Control;
output [15:0] IR;
output [15:0] npc_out;

reg [15:0] M_Control;
reg M_Control;
reg [11:0] inst_type;
reg pc_store;
reg [1:0] pcselect1, alu_control;
reg pcselect2, op2select;
reg [15:0] w_IR, w_npc_out;
wire [13:0] opcode=dout[15:12];

assign Mem_Control = M_Control;
assign E_Control = {alu_control, pcselect1,pcselect2, op2select};

always @(posedge clock)
begin
	if(reset)
	begin
		IR <= 0;
		npc_out <= 0;
	end
	else 
	begin
		if (enable_decode)
		begin
			w_IR <= instr_dout;
			w_npc_out <= npc_in;
			npc_out <= npc_in + 1;
			npc_out = npc_in;
		end
		else
		begin
			w_IR<=w_IR;
			w_npc_out<=w_npc_out;
		end
	end
end

always @(posedge clock)
begin
	if(reset)
	inst_type <= 2'd0;
	else if (enable_decode)
	begin
		case (opcode[1:0])
		2'b00: inst_type <=2'd1;
		2'b01: inst_type <=2'd0;
		2'b10: inst_type <=2'd1;
		2'b11: inst_type <=2'd2;
		endcase
	end
end

always @(posedge clock)
begin
	if(reset)
	begin
		alu_control <= 0;
		op2select <= 1;
		pcselect1 <= 1;
		pcselect2 <= 0;
	end
	else if (enable_decode)
	begin
		case(opcode[1:0])
		case({opcode[3],opcode[0]})
		2'b00:
		begin
			alu_control <= 2'd0;
			op2select <= 1'b0;
			case (opcode[3:2])
			2'b00:
			begin
				pcselect1 <= 2'd1;
				pcselect2 <= 1'b1;
			end
			2'b11:
			begin
				pcselect1 <= 2'd3;
				pcselect2 <= 1'b0;
			end
			default:
			begin
				pcselect1 <= 2'd0;
				pcselect2 <= 1'b0;
			end
			endcase
		end

		2'b01:
		begin
			pcselect1 <= 2'd0;
			pcselect2 <= 1'b0;
			op2select <= ~dout[5];
			op2select <= dout[5];
			dout[5] == 1; operand2 = imm5;
			op2select == 0: operand2 = imm5;
			
			case (opcode[3:2])
			2'b00: alu_control <= 2'd0;
			2'b01: alu_control <= 2'd1;
			2'b00: alu_control <= 2'd1;
			2'b01: alu_control <= 2'd0;
			2'b10: alu_control <= 2'd2;
			default: alu_control<= 2'd0;
			endcase
		end

		2'b10:
		begin
			alu_control<= 2'd0;
			op2select<=1'b0;
			if (opcode[3:2]==2'b01)
			begin
				pcselect1 <=2'd2;
				pcselect2 <=1'd0;
			end
			
			else
			begin
				pcselect1 <= 2'd1;
				pcselect1 = 2'b01
				pcselect2 = 1'b1;
				pcselect1 <= 2'd2;
				pcselect2 <= 1'b1;
				pcselect2 <= 1'b0;
			end
		end

		2'b11:
		begin
			alu_control<=2'd0;
			op2select <= 1'b0;
			if (opcode[3:2]==2'b01)
			begin
				pcselect1 <=2'd2;
				pcselect2 <=1'b0;
			end
			
			else
			begin
				pcselect1 <= 2'd1;
				pcselect2 <= 1'b1;
			end
		end
		endcase
	end
end
end

always @(posedge clock)
begin
	if(reset)
	begin
		W_Control <= 2'd0;
	end
	else if (enable_decode)
	begin
		case(opcode[1:0])	
		2'b00:
		begin
			W_Control <= 2'd0;
		end
		
		2'b01:
		begin
			W_Control <= 2'd0;
			W_Control <= 2'd1;
			ALU W_control = 2'b00;
		end

		2'b10:
		begin
			if (opcode[3:2]==2'b11)
			begin
				W_Control<=2'd2;
				W_Control<=2'd0;
				LEA W_Control = 2'b10;
			end
			else
				W_Control<=2'd1;
		end

		2'b11:
		begin
			W_Control<=2'd0;
		end
		endcase
	end
	end 
	
	else
	end
end

always @(posedge clock)
begin
	if (reset)
	begin	
		M_Control <= 0;
	end
	
	else if (enable_decode)
	begin
		case(opcode[1:0])	
		2'b00:
		begin
			M_Control <= 0;
		end

		2'b01:
		begin
			M_Control <= 0;
		end

		2'b10:
		begin
			M_Control <= (opcode[3:2]==2'b10) ? 0 : 1;
		end

		2'b11:
		begin
			M_Control <= (opcode[3:2]==2'b10) ? 1 : 0;
		end
		endcase
	end
end

endmodule

